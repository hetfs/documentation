"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8113],{4607:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(274);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}},9904:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Vale_Linter/Handling Incorrect Vale Flags","title":"Handling Incorrect Vale Flags","description":"If Vale incorrectly flags a valid word (e.g., \\"Textlint\\" or \\"Proselint\\"), you can resolve this issue by adding the word to an accept.txt vocabulary file or modifying the relevant style rule. Below are the steps to address this effectively.","source":"@site/docs/Vale_Linter/Handling Incorrect Vale Flags.md","sourceDirName":"Vale_Linter","slug":"/Vale_Linter/Handling Incorrect Vale Flags","permalink":"/documentation/docs/Vale_Linter/Handling Incorrect Vale Flags","draft":false,"unlisted":false,"editUrl":"https://github.com/hetfs/documentation/docs/Vale_Linter/Handling Incorrect Vale Flags.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Custom Vocabularies in Vale","permalink":"/documentation/docs/Vale_Linter/Create vocab txt File"},"next":{"title":"Integrating vale with github actions","permalink":"/documentation/docs/Vale_Linter/Integration Vale with GitHub Actions"}}');var r=i(1050),s=i(4607);const l={},a="Handling Incorrect Vale Flags",o={},c=[{value:"Option 1: Add the Word to <code>accept.txt</code>",id:"option-1-add-the-word-to-accepttxt",level:2},{value:"Steps:",id:"steps",level:4},{value:"Option 2: Modify the Rule in a Custom Vale Style",id:"option-2-modify-the-rule-in-a-custom-vale-style",level:2},{value:"Steps:",id:"steps-1",level:4},{value:"Option 3: Disable the Rule for Specific Words",id:"option-3-disable-the-rule-for-specific-words",level:2},{value:"Using Multiple Vocabularies in Vale",id:"using-multiple-vocabularies-in-vale",level:2},{value:"Step 1: Organize Your Vocabulary Files",id:"step-1-organize-your-vocabulary-files",level:4},{value:"Step 2: Update Your <code>.vale.ini</code> Configuration",id:"step-2-update-your-valeini-configuration",level:4},{value:"Step 3: Verify the Configuration",id:"step-3-verify-the-configuration",level:4},{value:"Best Practices",id:"best-practices",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"handling-incorrect-vale-flags",children:"Handling Incorrect Vale Flags"})}),"\n",(0,r.jsxs)(n.p,{children:['If Vale incorrectly flags a valid word (e.g., "Textlint" or "Proselint"), you can resolve this issue by adding the word to an ',(0,r.jsx)(n.strong,{children:"accept.txt"})," vocabulary file or modifying the relevant style rule. Below are the steps to address this effectively."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"option-1-add-the-word-to-accepttxt",children:["Option 1: Add the Word to ",(0,r.jsx)(n.code,{children:"accept.txt"})]}),"\n",(0,r.jsxs)(n.p,{children:["Vale uses vocabulary lists to recognize specific terms as valid. To allow a word, add it to your project's ",(0,r.jsx)(n.strong,{children:"accept.txt"})," file."]}),"\n",(0,r.jsx)(n.h4,{id:"steps",children:"Steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Locate or create the ",(0,r.jsx)(n.strong,{children:"accept.txt"})," file in your Vale vocabulary directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"styles/\r\n\u251c\u2500\u2500 config/\r\n\u2502   \u2514\u2500\u2500 vocabularies/\r\n\u2502       \u251c\u2500\u2500 CustomVocab/\r\n\u2502       \u2502   \u251c\u2500\u2500 accept.txt  \r\n\u2502       \u2502   \u2514\u2500\u2500 reject.txt  \n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Open ",(0,r.jsx)(n.strong,{children:"accept.txt"})," and add the word:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"Textlint\r\nProselint\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Ensure your ",(0,r.jsx)(n.code,{children:".vale.ini"})," file references the vocabulary:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"StylesPath = styles\r\nVocab = CustomVocab\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"option-2-modify-the-rule-in-a-custom-vale-style",children:"Option 2: Modify the Rule in a Custom Vale Style"}),"\n",(0,r.jsx)(n.p,{children:"If a style rule incorrectly flags the word, you can override it by adjusting your custom Vale rule."}),"\n",(0,r.jsx)(n.h4,{id:"steps-1",children:"Steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Locate the relevant rule file (e.g., ",(0,r.jsx)(n.code,{children:"Textlint.yml"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add an exception using the ",(0,r.jsx)(n.code,{children:"exceptions"})," field:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"extends: existence\r\nmessage: \"Avoid using '%s'.\"\r\nlevel: warning\r\nexceptions:\r\n - Textlint\r\n - Proselint\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"option-3-disable-the-rule-for-specific-words",children:"Option 3: Disable the Rule for Specific Words"}),"\n",(0,r.jsxs)(n.p,{children:["If the issue persists, disable the problematic rule in your ",(0,r.jsx)(n.code,{children:".vale.ini"})," configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:'[*.md]\r\nBasedOnStyles = Vale\r\nTextlint = NO  # Disables the rule flagging "Textlint"\n'})}),"\n",(0,r.jsx)(n.p,{children:"By implementing these fixes, you ensure that valid words are not mistakenly flagged as errors while maintaining robust linting for other terms."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"using-multiple-vocabularies-in-vale",children:"Using Multiple Vocabularies in Vale"}),"\n",(0,r.jsxs)(n.p,{children:["In Vale, you can specify ",(0,r.jsx)(n.strong,{children:"multiple vocabularies"})," in your ",(0,r.jsx)(n.code,{children:".vale.ini"})," configuration by listing them as a comma-separated value under ",(0,r.jsx)(n.code,{children:"Vocab"}),". This allows you to use multiple ",(0,r.jsx)(n.code,{children:"accept.txt"})," files in one project."]}),"\n",(0,r.jsx)(n.h4,{id:"step-1-organize-your-vocabulary-files",children:"Step 1: Organize Your Vocabulary Files"}),"\n",(0,r.jsxs)(n.p,{children:["Ensure that your vocabularies are structured correctly inside the ",(0,r.jsx)(n.code,{children:"styles/config/vocabularies/"})," directory."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"styles/\r\n\u251c\u2500\u2500 config/\r\n\u2502   \u2514\u2500\u2500 vocabularies/\r\n\u2502       \u251c\u2500\u2500 DomainTerms/\r\n\u2502       \u2502   \u251c\u2500\u2500 accept.txt  \r\n\u2502       \u2502   \u2514\u2500\u2500 reject.txt  \r\n\u2502       \u251c\u2500\u2500 CustomVocab/\r\n\u2502       \u2502   \u251c\u2500\u2500 accept.txt  \r\n\u2502       \u2502   \u2514\u2500\u2500 reject.txt  \n"})}),"\n",(0,r.jsxs)(n.p,{children:["Each vocabulary folder (",(0,r.jsx)(n.code,{children:"DomainTerms"}),", ",(0,r.jsx)(n.code,{children:"CustomVocab"}),") contains its own ",(0,r.jsx)(n.code,{children:"accept.txt"})," and ",(0,r.jsx)(n.code,{children:"reject.txt"})," files."]}),"\n",(0,r.jsxs)(n.h4,{id:"step-2-update-your-valeini-configuration",children:["Step 2: Update Your ",(0,r.jsx)(n.code,{children:".vale.ini"})," Configuration"]}),"\n",(0,r.jsxs)(n.p,{children:["Modify your ",(0,r.jsx)(n.code,{children:".vale.ini"})," file to include ",(0,r.jsx)(n.strong,{children:"multiple vocabularies"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"StylesPath = styles\r\n\r\n# Enable multiple vocabularies\r\nVocab = DomainTerms, CustomVocab\r\n\r\n[*]\r\nBasedOnStyles = Vale, MyStyle  # Use Vale with your custom style\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This configuration ensures all terms listed in ",(0,r.jsx)(n.code,{children:"accept.txt"})," across both vocabularies are recognized."]}),"\n",(0,r.jsx)(n.h4,{id:"step-3-verify-the-configuration",children:"Step 3: Verify the Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Run Vale against a test document to confirm it correctly applies both vocabularies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"vale --config=.vale.ini your-document.md\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If any terms from ",(0,r.jsxs)(n.strong,{children:["either ",(0,r.jsx)(n.code,{children:"accept.txt"})," file"]})," are still flagged as errors, ensure:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The vocabularies exist in ",(0,r.jsx)(n.code,{children:"styles/config/vocabularies/"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Each vocabulary folder contains a correctly formatted ",(0,r.jsx)(n.code,{children:"accept.txt"})," file."]}),"\n",(0,r.jsxs)(n.li,{children:["Your ",(0,r.jsx)(n.code,{children:".vale.ini"})," correctly references both vocabularies."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Using multiple vocabularies enables you to maintain ",(0,r.jsx)(n.strong,{children:"separate terminology lists"})," for different domains (e.g., technical terms, legal jargon, or industry-specific vocabulary) while ensuring consistency across your documentation."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsxs)(n.strong,{children:["Use ",(0,r.jsx)(n.code,{children:"accept.txt"})]})," for managing allowed words across vocabularies."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Use rule exceptions"})," to maintain rule functionality while ignoring false positives."]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Disable entire rules"})," only if you never want Vale to flag foreign words."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Run a test with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"vale --config=.vale.ini your-document.md\n"})}),"\n",(0,r.jsx)(n.p,{children:"These solutions ensure that valid words are correctly handled while maintaining effective linting."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);